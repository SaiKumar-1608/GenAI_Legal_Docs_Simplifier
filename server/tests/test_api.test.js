// server/tests/test_api.test.js
const request = require('supertest');

describe('API integration tests - /api/simplify', () => {
  // Set a dummy API key so server doesn't exit on startup
  beforeAll(() => {
    process.env.OPENAI_API_KEY = process.env.OPENAI_API_KEY || 'sk-test-key';
  });

  // Mock global.fetch used by createEmbedding & callOpenAIChat
  beforeEach(() => {
    // reset any existing mock
    global.fetch = jest.fn((url, opts) => {
      // simple router for tests: respond with embeddings for embeddings endpoint,
      // and a predictable chat response for chat completions endpoint.
      if (typeof url === 'string' && url.includes('/v1/embeddings')) {
        return Promise.resolve({
          ok: true,
          json: async () => ({
            data: [{ embedding: new Array(1536).fill(0.001) }] // small dummy vector
          })
        });
      }

      if (typeof url === 'string' && url.includes('/v1/chat/completions')) {
        return Promise.resolve({
          ok: true,
          json: async () => ({
            choices: [{
              message: {
                content: 'Overall summary: This is a short summary generated by the mocked LLM\n\n1. Clause A\n2. Clause B'
              }
            }]
          })
        });
      }

      // default fallback
      return Promise.resolve({
        ok: false,
        json: async () => ({ error: 'unknown endpoint' })
      });
    });
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  test('POST /api/simplify returns bundle_id, simplified text and retrieved_chunk_ids', async () => {
    // require app after mocks are in place
    const app = require('../index'); // path from tests file to your index.js

    const res = await request(app)
      .post('/api/simplify')
      .send({ text: 'This is a short NDA example. Termination: 30 days.', reading_level: 'lay' })
      .set('Content-Type', 'application/json')
      .expect(200);

    // basic checks
    expect(res.body).toHaveProperty('bundle_id');
    // the simplified should match the mocked LLM content above
    expect(res.body.simplified).toMatch(/Overall summary: This is a short summary generated by the mocked LLM/);
    expect(res.body.retrieved_chunk_ids).toBeInstanceOf(Array);
  });

  test('POST /api/simplify with short/invalid input returns 400', async () => {
    const app = require('../index');
    const res = await request(app).post('/api/simplify').send({ text: 'a' });
    expect(res.statusCode).toBe(400);
  });
});
